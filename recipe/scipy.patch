From c93d70410149a304a217e07c0e6f98e1bffe7fe2 Mon Sep 17 00:00:00 2001
From: Jan Janssen <janssen@mpie.de>
Date: Tue, 25 Jun 2024 12:28:23 +0200
Subject: [PATCH] Change import scipy.integrate.simps to
 scipy.integrate.simpson

---
 dynaphopy/__init__.py                    | 4 ++--
 dynaphopy/analysis/fitting/__init__.py   | 6 +++---
 dynaphopy/analysis/thermal_properties.py | 6 +++---
 3 files changed, 8 insertions(+), 8 deletions(-)

diff --git a/dynaphopy/__init__.py b/dynaphopy/__init__.py
index ac2d43c..7ab21a6 100644
--- a/dynaphopy/__init__.py
+++ b/dynaphopy/__init__.py
@@ -910,7 +910,7 @@ def plot_power_spectrum_full(self):
         # plt.legend()
         plt.show()
 
-        total_integral = integrate.simps(self.get_power_spectrum_full(), x=self.get_frequency_range())
+        total_integral = integrate.simpson(self.get_power_spectrum_full(), x=self.get_frequency_range())
         print("Total Area (Kinetic energy <K>): {0} eV".format(total_integral))
 
     def plot_power_spectrum_wave_vector(self):
@@ -920,7 +920,7 @@ def plot_power_spectrum_wave_vector(self):
         plt.ylabel('eV * ps')
         plt.axhline(y=0, color='k', ls='dashed')
         plt.show()
-        total_integral = integrate.simps(self.get_power_spectrum_wave_vector(), x=self.get_frequency_range())
+        total_integral = integrate.simpson(self.get_power_spectrum_wave_vector(), x=self.get_frequency_range())
         print("Total Area (Kinetic energy <K>): {0} eV".format(total_integral))
 
     def plot_power_spectrum_phonon(self):
diff --git a/dynaphopy/analysis/fitting/__init__.py b/dynaphopy/analysis/fitting/__init__.py
index 61b1249..79c8ec6 100644
--- a/dynaphopy/analysis/fitting/__init__.py
+++ b/dynaphopy/analysis/fitting/__init__.py
@@ -1,6 +1,6 @@
 import numpy as np
 import matplotlib.pyplot as plt
-from scipy.integrate import simps
+from scipy.integrate import simpson
 from dynaphopy.analysis.fitting import fitting_functions
 
 h_planck = 4.135667662e-3  # eV/ps
@@ -79,7 +79,7 @@ def phonon_fitting_analysis(original, ps_frequencies,
         maximum = fitting_parameters['maximum']
         error = fitting_parameters['global_error']
 
-        total_integral = simps(power_spectrum, x=ps_frequencies)
+        total_integral = simpson(power_spectrum, x=ps_frequencies)
 
         # Calculated properties
         dt_Q2_lor = 2 * area
@@ -185,4 +185,4 @@ def phonon_fitting_analysis(original, ps_frequencies,
     return {'positions': positions,
             'widths': widths,
             'error': errors,
-            'dt_Q2': dt_Q2_s}
\ No newline at end of file
+            'dt_Q2': dt_Q2_s}
diff --git a/dynaphopy/analysis/thermal_properties.py b/dynaphopy/analysis/thermal_properties.py
index 2e67079..137d05b 100644
--- a/dynaphopy/analysis/thermal_properties.py
+++ b/dynaphopy/analysis/thermal_properties.py
@@ -37,7 +37,7 @@ def n(temp, freq):
     total_energy = np.nan_to_num([dos[i] * h_bar * freq * (0.5 + n(temperature, freq))
                                  for i, freq in enumerate(frequency)])
 
-    total_energy = integrate.simps(total_energy, frequency) * N_a / 1000  # KJ/K/mol
+    total_energy = integrate.simpson(total_energy, frequency) * N_a / 1000  # KJ/K/mol
     return total_energy
 
 
@@ -47,7 +47,7 @@ def get_free_energy(temperature, frequency, dos):
                                  for i, freq in enumerate(frequency)])
 
     free_energy[0] = 0
-    free_energy = integrate.simps(free_energy, frequency) * N_a / 1000  # KJ/K/mol
+    free_energy = integrate.simpson(free_energy, frequency) * N_a / 1000  # KJ/K/mol
     return free_energy
 
 
@@ -195,4 +195,4 @@ def z(temp, freq):
     print ('Entropy: {0} J/K/mol'.format(entropy))
     print ('Cv: {0} J/K/mol'.format(c_v))
     print (np.trapz(dos, x=frequency)/(8*3))
-    print (integrate.simps(dos, x=frequency)/(8*3))
\ No newline at end of file
+    print (integrate.simps(dos, x=frequency)/(8*3))
